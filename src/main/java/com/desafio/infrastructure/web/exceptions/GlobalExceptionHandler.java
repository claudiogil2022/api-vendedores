package com.desafio.infrastructure.web.exceptions;

import com.desafio.application.dtos.response.ApiResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<ApiResponse<Void>> handleRuntimeException(RuntimeException ex) {
        log.error("Erro de runtime: ", ex);
        String friendlyMessage = getFriendlyMessage(ex.getMessage());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.error(friendlyMessage));
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ApiResponse<Void>> handleIllegalArgumentException(IllegalArgumentException ex) {
        log.error("Argumento inv√°lido: ", ex);
        String friendlyMessage = getFriendlyMessage(ex.getMessage());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.error(friendlyMessage));
    }

    @ExceptionHandler(HttpMessageNotReadableException.class)
    public ResponseEntity<ApiResponse<Void>> handleJsonParseException(HttpMessageNotReadableException ex) {
        log.error("Erro no formato JSON: ", ex);
        log.error("Causa raiz: ", ex.getCause());
        String mensagem = "‚ùå Formato de dados inv√°lido. Verifique se todos os campos est√£o preenchidos corretamente.";
        
        // Melhor diagn√≥stico do erro
        if (ex.getCause() != null) {
            String causaMessage = ex.getCause().getMessage();
            if (causaMessage != null) {
                if (causaMessage.contains("TipoContratacao")) {
                    mensagem = "‚ùå Tipo de contrata√ß√£o inv√°lido. Use: CLT, OUTSOURCING ou PESSOA_JURIDICA";
                } else if (causaMessage.contains("LocalDate")) {
                    mensagem = "‚ùå Formato de data inv√°lido. Use: yyyy-MM-dd (exemplo: 1990-01-15)";
                } else if (causaMessage.contains("Cannot deserialize")) {
                    mensagem = "‚ùå Erro na estrutura JSON. Verifique a sintaxe e tipos de dados.";
                }
            }
        }
        
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.error(mensagem));
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ApiResponse<Map<String, String>>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        log.error("Erro de valida√ß√£o: ", ex);
        
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = getFriendlyValidationMessage(fieldName, error.getDefaultMessage());
            errors.put(fieldName, errorMessage);
        });
        
        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(ApiResponse.<Map<String, String>>builder()
                        .success(false)
                        .message("‚ö†Ô∏è Dados incompletos ou inv√°lidos. Verifique os campos destacados:")
                        .data(errors)
                        .timestamp(java.time.LocalDateTime.now().toString())
                        .build());
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ApiResponse<Void>> handleGenericException(Exception ex) {
        log.error("Erro interno: ", ex);
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(ApiResponse.error("üîß Ops! Algo deu errado. Nossa equipe t√©cnica foi notificada."));
    }

    private String getFriendlyMessage(String originalMessage) {
        if (originalMessage == null) return "‚ùå Erro desconhecido";
        
        // Mensagens espec√≠ficas de documento
        if (originalMessage.contains("Documento inv√°lido")) {
            return "‚ùå CPF ou CNPJ inv√°lido. Verifique se digitou corretamente.";
        }
        if (originalMessage.contains("Pessoa F√≠sica deve ter CPF")) {
            return "‚ùå Para CLT ou Terceirizado, informe um CPF v√°lido (11 d√≠gitos).";
        }
        if (originalMessage.contains("Pessoa Jur√≠dica deve ter CNPJ")) {
            return "‚ùå Para Pessoa Jur√≠dica, informe um CNPJ v√°lido (14 d√≠gitos).";
        }
        
        // Mensagens de duplicidade
        if (originalMessage.contains("J√° existe um vendedor com este documento")) {
            return "‚ö†Ô∏è CPF/CNPJ j√° cadastrado. Cada vendedor deve ter um documento √∫nico.";
        }
        if (originalMessage.contains("J√° existe um vendedor com este email")) {
            return "‚ö†Ô∏è E-mail j√° cadastrado. Cada vendedor deve ter um e-mail √∫nico.";
        }
        
        // Mensagens de filial
        if (originalMessage.contains("Filial n√£o encontrada")) {
            return "‚ùå Filial inv√°lida. Selecione uma filial v√°lida.";
        }
        if (originalMessage.contains("Filial n√£o est√° ativa")) {
            return "‚ö†Ô∏è Filial inativa. N√£o √© poss√≠vel cadastrar vendedores nesta filial.";
        }
        
        // Mensagens de processamento
        if (originalMessage.contains("Processamento n√£o encontrado")) {
            return "‚ùå Processamento n√£o encontrado. Verifique o ID informado.";
        }
        
        // Mensagem padr√£o
        return "‚ùå " + originalMessage;
    }

    private String getFriendlyValidationMessage(String fieldName, String originalMessage) {
        switch (fieldName) {
            case "nome":
                return "üìù Nome √© obrigat√≥rio e deve ter pelo menos 2 caracteres";
            case "email":
                return "üìß E-mail √© obrigat√≥rio e deve ter um formato v√°lido";
            case "documento":
                return "üÜî CPF ou CNPJ √© obrigat√≥rio";
            case "dataNascimento":
                return "üìÖ Data de nascimento √© obrigat√≥ria";
            case "filialId":
                return "üè¢ Filial √© obrigat√≥ria";
            case "tipoContratacao":
                return "üíº Tipo de contrata√ß√£o √© obrigat√≥rio (CLT, Terceirizado ou Pessoa Jur√≠dica)";
            default:
                return originalMessage;
        }
    }
}
